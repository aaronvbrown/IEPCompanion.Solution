// <auto-generated />
using System;
using IEPCompanion.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IEPCompanion.Migrations
{
    [DbContext(typeof(IEPCompanionContext))]
    [Migration("20231205044901_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("IEPCompanion.Models.Accommodation", b =>
                {
                    b.Property<int>("AccommodationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.HasKey("AccommodationId");

                    b.ToTable("Accommodations");

                    b.HasData(
                        new
                        {
                            AccommodationId = 1,
                            Description = "Extended Time"
                        },
                        new
                        {
                            AccommodationId = 2,
                            Description = "Frequent Breaks"
                        },
                        new
                        {
                            AccommodationId = 3,
                            Description = "Modified Assignments"
                        },
                        new
                        {
                            AccommodationId = 4,
                            Description = "Assistive Technology"
                        },
                        new
                        {
                            AccommodationId = 5,
                            Description = "Preferred Seating"
                        },
                        new
                        {
                            AccommodationId = 6,
                            Description = "Sensory Supports"
                        },
                        new
                        {
                            AccommodationId = 7,
                            Description = "Visual Aids"
                        },
                        new
                        {
                            AccommodationId = 8,
                            Description = "Verbal Instructions"
                        },
                        new
                        {
                            AccommodationId = 9,
                            Description = "Note-taking Assistance"
                        },
                        new
                        {
                            AccommodationId = 10,
                            Description = "Flexible Grading"
                        },
                        new
                        {
                            AccommodationId = 11,
                            Description = "Alternative Testing Arrangements"
                        },
                        new
                        {
                            AccommodationId = 12,
                            Description = "Behavioral Support Plan"
                        },
                        new
                        {
                            AccommodationId = 13,
                            Description = "Speech/Language Services"
                        },
                        new
                        {
                            AccommodationId = 14,
                            Description = "Occupational Therapy"
                        },
                        new
                        {
                            AccommodationId = 15,
                            Description = "Physical Therapy"
                        },
                        new
                        {
                            AccommodationId = 16,
                            Description = "Social Skills Training"
                        },
                        new
                        {
                            AccommodationId = 17,
                            Description = "Transition Planning"
                        });
                });

            modelBuilder.Entity("IEPCompanion.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IEPCompanion.Models.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.HasKey("ChallengeId");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            ChallengeId = 1,
                            Description = "Learning Disabilities"
                        },
                        new
                        {
                            ChallengeId = 2,
                            Description = "ADHD"
                        },
                        new
                        {
                            ChallengeId = 3,
                            Description = "ASD"
                        },
                        new
                        {
                            ChallengeId = 4,
                            Description = "Physical Disabilities"
                        },
                        new
                        {
                            ChallengeId = 5,
                            Description = "Intellectual Disabilities"
                        },
                        new
                        {
                            ChallengeId = 6,
                            Description = "Emotional or Behavioral Challenges"
                        },
                        new
                        {
                            ChallengeId = 7,
                            Description = "Speech and Language Disorders"
                        },
                        new
                        {
                            ChallengeId = 8,
                            Description = "Visual Impairments"
                        },
                        new
                        {
                            ChallengeId = 9,
                            Description = "Hearing Impairments"
                        },
                        new
                        {
                            ChallengeId = 10,
                            Description = "Medical Conditions"
                        },
                        new
                        {
                            ChallengeId = 11,
                            Description = "Executive Functioning Deficits"
                        },
                        new
                        {
                            ChallengeId = 12,
                            Description = "Social Skills Deficits"
                        },
                        new
                        {
                            ChallengeId = 13,
                            Description = "Sensory Processing Issues"
                        },
                        new
                        {
                            ChallengeId = 14,
                            Description = "Mental Health Challenges"
                        });
                });

            modelBuilder.Entity("IEPCompanion.Models.IEP", b =>
                {
                    b.Property<int>("IEPId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Disability")
                        .HasColumnType("longtext");

                    b.Property<string>("Goals")
                        .HasColumnType("longtext");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolYear")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("IEPId");

                    b.HasIndex("UserId");

                    b.ToTable("IEPs");
                });

            modelBuilder.Entity("IEPCompanion.Models.IEPPerson", b =>
                {
                    b.Property<int>("IEPPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IEPId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("IEPPersonId");

                    b.HasIndex("IEPId");

                    b.HasIndex("PersonId");

                    b.ToTable("IEPPerson");
                });

            modelBuilder.Entity("IEPCompanion.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("PersonId");

                    b.HasIndex("UserId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            PersonId = 51,
                            Email = "Alice.Johnson@email.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 52,
                            Email = "Bob.Smith@email.com",
                            FirstName = "Bob",
                            LastName = "Smith",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 53,
                            Email = "Carol.Williams@email.com",
                            FirstName = "Carol",
                            LastName = "Williams",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 54,
                            Email = "David.Brown@email.com",
                            FirstName = "David",
                            LastName = "Brown",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 55,
                            Email = "Eve.Jones@email.com",
                            FirstName = "Eve",
                            LastName = "Jones",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 56,
                            Email = "Frank.Miller@email.com",
                            FirstName = "Frank",
                            LastName = "Miller",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 57,
                            Email = "Grace.Davis@email.com",
                            FirstName = "Grace",
                            LastName = "Davis",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 58,
                            Email = "Henry.Garcia@email.com",
                            FirstName = "Henry",
                            LastName = "Garcia",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 59,
                            Email = "Ivy.Rodriguez@email.com",
                            FirstName = "Ivy",
                            LastName = "Rodriguez",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 60,
                            Email = "Jack.Wilson@email.com",
                            FirstName = "Jack",
                            LastName = "Wilson",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 61,
                            Email = "Karen.Martinez@email.com",
                            FirstName = "Karen",
                            LastName = "Martinez",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 62,
                            Email = "Leo.Anderson@email.com",
                            FirstName = "Leo",
                            LastName = "Anderson",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 63,
                            Email = "Mia.Taylor@email.com",
                            FirstName = "Mia",
                            LastName = "Taylor",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 64,
                            Email = "Nick.Thomas@email.com",
                            FirstName = "Nick",
                            LastName = "Thomas",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 65,
                            Email = "Olivia.Hernandez@email.com",
                            FirstName = "Olivia",
                            LastName = "Hernandez",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 66,
                            Email = "Paul.Moore@email.com",
                            FirstName = "Paul",
                            LastName = "Moore",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 67,
                            Email = "Quinn.Jackson@email.com",
                            FirstName = "Quinn",
                            LastName = "Jackson",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 68,
                            Email = "Rachel.Martin@email.com",
                            FirstName = "Rachel",
                            LastName = "Martin",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 69,
                            Email = "Steve.Lee@email.com",
                            FirstName = "Steve",
                            LastName = "Lee",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 70,
                            Email = "Tina.Perez@email.com",
                            FirstName = "Tina",
                            LastName = "Perez",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 71,
                            Email = "Uma.Thompson@email.com",
                            FirstName = "Uma",
                            LastName = "Thompson",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 72,
                            Email = "Victor.White@email.com",
                            FirstName = "Victor",
                            LastName = "White",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 73,
                            Email = "Wendy.Harris@email.com",
                            FirstName = "Wendy",
                            LastName = "Harris",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 74,
                            Email = "Xavier.Sanchez@email.com",
                            FirstName = "Xavier",
                            LastName = "Sanchez",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 75,
                            Email = "Yvonne.Clark@email.com",
                            FirstName = "Yvonne",
                            LastName = "Clark",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 76,
                            Email = "Zack.Ramirez@email.com",
                            FirstName = "Zack",
                            LastName = "Ramirez",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 77,
                            Email = "Amber.Lewis@email.com",
                            FirstName = "Amber",
                            LastName = "Lewis",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 78,
                            Email = "Brad.Robinson@email.com",
                            FirstName = "Brad",
                            LastName = "Robinson",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 79,
                            Email = "Cindy.Walker@email.com",
                            FirstName = "Cindy",
                            LastName = "Walker",
                            Role = "Student"
                        },
                        new
                        {
                            PersonId = 80,
                            Email = "Derek.Young@email.com",
                            FirstName = "Derek",
                            LastName = "Young",
                            Role = "Student"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IEPCompanion.Models.IEP", b =>
                {
                    b.HasOne("IEPCompanion.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IEPCompanion.Models.IEPPerson", b =>
                {
                    b.HasOne("IEPCompanion.Models.IEP", "IEP")
                        .WithMany("JoinEntities")
                        .HasForeignKey("IEPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IEPCompanion.Models.Person", "Person")
                        .WithMany("JoinEntities")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IEP");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("IEPCompanion.Models.Person", b =>
                {
                    b.HasOne("IEPCompanion.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IEPCompanion.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IEPCompanion.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IEPCompanion.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IEPCompanion.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IEPCompanion.Models.IEP", b =>
                {
                    b.Navigation("JoinEntities");
                });

            modelBuilder.Entity("IEPCompanion.Models.Person", b =>
                {
                    b.Navigation("JoinEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
